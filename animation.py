import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import matplotlib.colors as colors



def integer_grid(grid):
    """
    Takes in the S,I,R,D,H grid and turns it into a 0,1,2,3,4 grid which is used
    to aid animation

    Parameters
    ----------
    grid : Nd array
        grid including all the individuals of the population

    Returns
    -------
    intgrid : Nd array
        grid with intger representation of all the states of the indivudals. 
        S=0, I=1, R=2, D=3, H=4

    """
    n = len(grid)
    intgrid=np.zeros((n,n),dtype=int)  
    for counter1,row in enumerate(grid):
        counter2 = 0
        for square in row: 
            if square.inf_status[0] =='I':
                intgrid[counter1,counter2]=1
            elif square.inf_status[0] =='R':
                intgrid[counter1,counter2]=2
            elif square.inf_status[0] == 'D':
                intgrid[counter1,counter2] = 3
            elif square.inf_status[0] =='H':
                intgrid[counter1,counter2]=4
            else:
                intgrid[counter1,counter2]=0
            counter2 += 1
    return intgrid


def animate_func(iteration,grid_list,first_grid):
    """
    Produces grid plots for each day, with: blue=susceptible, red=infected,
    green=recovered, black=dead, cyan=hospitalised. Returns these as individual 
    items so that 'grid_animation' can iterate through and produce an animation.

    Parameters
    ----------
    iteration : Int
        The required day of grid plot provided by the 'grid_animation' function
    grid_list : List
        The list of integer grids for each day generated by the main function
    first_grid : Nd array
        The inital grid from the grid_list

    Returns
    -------
    [im]: Matplotlib image
        The grid plot for a given day, which is then repeated in 'grid_animation' to produce the animated figure
    
        

    """
    fig = plt.figure(2)
    cols=len(first_grid[0])
    rows=len(first_grid[1])
    brg=colors.ListedColormap(['blue','red','green','black','cyan'])
    bounds=[0,1,2,3,4,5]
    norm = colors.BoundaryNorm(bounds, brg.N)
    im = plt.imshow(first_grid,cmap=brg,aspect='auto',interpolation='nearest',extent=[0.5, 0.5+cols, 0.5, 0.5+rows], norm=norm)
    plt.axis('off')
    im.set_array(grid_list[iteration])
    return [im]

def grid_animation(grid_list):
    """
    Iterates through the grid plots provided by 'animate_func' and returns an animation
    for the duration.

    Parameters
    ----------
    grid_list : List
        The list of integer grids for each day generated by the main function

    Returns
    -------
    anim : Matplotlib animation
        The animation of the grid plots for the duration

    """
    fig = plt.figure(2)
    anim = animation.FuncAnimation(fig, animate_func, frames = len(grid_list),fargs=(grid_list,grid_list[0],), interval = 600,repeat=False)
    return anim

def inst_anim(grid_list,time):
    """
    Returns the grid plot for a specific day - used to showcase output in report

    Parameters
    ----------
    grid_list : List
        The list of integer grids for each day generated by the main function
    time : Int
        The desired day to show the instaneous grid plot

    Returns
    -------
    None.

    """
    print(type(time))
    fig = plt.figure(3)
    cols=len(grid_list[0][0])
    rows=len(grid_list[0][1])
    brg=colors.ListedColormap(['blue','red','green','black','cyan'])
    bounds=[0,1,2,3,4,5]
    norm = colors.BoundaryNorm(bounds, brg.N)
    im = plt.imshow(grid_list[0],cmap=brg,aspect='auto',interpolation='nearest',extent=[0.5, 0.5+cols, 0.5, 0.5+rows], norm=norm)
    plt.axis('off')
    im.set_array(grid_list[time])
    return


